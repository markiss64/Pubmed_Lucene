package lucene;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.Date;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.LongPoint;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.Term;
import org.apache.lucene.index.IndexWriterConfig.OpenMode;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;

public class IndexFiles {
	// get params from string
	String indexPath = 
			"./csv_search/index/works0950.txt";
	String docsPath = 
			"./csv_search/docs/works0950.txt";
	
	boolean createflag = true;
	int keyindex = 0;
	
	
	String[] fieldnames = null;
	
	
	private IndexFiles() {
		index(indexPath, docsPath, true);
	}
	

	/** Index all text files under a directory. */
	public void index(String indexPath, String docsPath, boolean create) {
		
		final Path docDir = Paths.get(docsPath);
		if (!Files.isReadable(docDir)) {
			System.out.println("Document directory '" +docDir.toAbsolutePath()+ "' does not exist or is not readable, please check the path");
			System.exit(1);
		}
		Date start = new Date();
		try {
			System.out.println("Indexing to directory '" + indexPath + "'...");

			Directory dir = FSDirectory.open(Paths.get(indexPath));
			Analyzer analyzer = new StandardAnalyzer();
			IndexWriterConfig iwc = new IndexWriterConfig(analyzer);
			
			
			
			if (create) {
				// Create a new index in the directory, removing any previously indexed documents:
				iwc.setOpenMode(OpenMode.CREATE);
			} else {
				// Add new documents to an existing index:
				iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);
			}
			
			IndexWriter writer = new IndexWriter(dir, iwc);

			csvIterator(writer, docsPath);
			
			writer.close();

			Date end = new Date();
			System.out.println(end.getTime() - start.getTime() + " total milliseconds");

		} catch (IOException e) {
			System.out.println(" caught a " + e.getClass() +
					"\n with message: " + e.getMessage());
		}
	}

	private void csvIterator(IndexWriter writer, String csvfilepath_name) {
		String[] contents = null;
		
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(csvfilepath_name));
		    StringBuilder sb = new StringBuilder();
		    String line = br.readLine();
		    
			fieldnames = line.split("\t");
//			fieldnames = line.split(",");
		    
		    while (line != null) {
		        sb.append(line);
		        sb.append(System.lineSeparator());
		        line = br.readLine();
		        // System.out.println(line);
		        
		        if(line==null) continue;
		        if(line.equals("")) continue;
		        
		        contents = line.split("\t");
//		        contents = line.split(",");
		        		        
		        // indexDoc_eachcol
		        indexDoc_eachcol(writer, keyindex, fieldnames, contents);
		    }
		    
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			
		    try {
				br.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	
	/** Indexes a single document */
	private void indexDoc_eachcol(IndexWriter writer, int keyindex, 
			String[] fieldnames, String[] contents) throws IOException {
		Document doc = new Document();

		
		for(int i = 0 ; i < fieldnames.length ; i++) {
			// empty
			String content_tmp = "";
			if(i > contents.length-1)
				content_tmp  = "";
			else
				content_tmp = contents[i];
			
			System.out.println("contents["+i+"]: "+ content_tmp);
			
			
			Reader targetReader = new StringReader(content_tmp );
			doc.add(new TextField(fieldnames[i], targetReader));
		}
		
		String at_once = "";
		for(int i = 0 ; i < fieldnames.length ; i++) {
			String content_tmp = "";
			if(i > contents.length-1)
				content_tmp  = "";
			else
				content_tmp = contents[i];
			
			System.out.println("contents["+i+"]: "+ content_tmp);

			at_once += content_tmp + " ";
		}
		
		Reader targetReader = new StringReader(at_once);
		doc.add(new TextField("content", targetReader));
		
		//TruncateTokenFilterFactory or LengthFilterFactory.
		
		// 너무 긴 필드에 대해서는 인덱싱을 무시함
		for(int i = 0 ; i < fieldnames.length ; i++) {
			if(fieldnames[i].equalsIgnoreCase("affiliation")) continue;
			
			String content_tmp = "";
			if(i > contents.length-1)
				content_tmp  = "";
			else
				content_tmp = contents[i];
			System.out.println("contents["+i+"]: "+ content_tmp);
			Field field = new StringField(fieldnames[i]+"_", getMaxByte(content_tmp, 32000), Field.Store.YES);
			
			doc.add(field);
		}
		
		if (writer.getConfig().getOpenMode() == OpenMode.CREATE) {
			// New index, so we just add the document (no old document can be there):
			//System.out.println("adding " + fieldnames[keyindex]+"_ :\"" +  contents[keyindex] + "\" has added to indices\n");
			writer.addDocument(doc);
		}
 
		else {
			System.out.println("updating key("+fieldnames[keyindex]+"_"+"): " + contents[keyindex]);
			writer.updateDocument(new Term(fieldnames[keyindex]+"_", contents[keyindex]), doc);
		}
	}
	
	public String getMaxByte(String org, int maxLength) {
		if(org.length()>maxLength) {			 
			return new String(org.getBytes(), 0,maxLength);
		}
		return org;
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new IndexFiles();
	}

}
