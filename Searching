package lucene;
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Date;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.search.similarities.BM25Similarity;
import org.apache.lucene.store.FSDirectory;

public class SearchFiles {
	
	String queries = null;
	int repeat = 0;
	boolean raw = false;
	String queryString = null;
	int hitsPerPage = 10;
	String[] fieldnames = null;
	
	
	int keyindex = 0;			// key 값의 컬럼 번호
	
	String index = 
			"./csv_search/index/works2014.txt";
	
	String docsPath = 
			"./csv_search/docs/works2014.txt";
	
	public SearchFiles() throws Exception {		
		querySearch();
	}

	private void querySearch() throws Exception {
		fieldnames = getfieldnames(docsPath);
		
		IndexReader reader = DirectoryReader.open(FSDirectory.open(Paths.get(index)));
		IndexSearcher searcher = new IndexSearcher(reader);
		Analyzer analyzer = new StandardAnalyzer();

		BufferedReader in = null;
		if (queries != null) {
			in = Files.newBufferedReader(Paths.get(queries), StandardCharsets.UTF_8);
		} else {
			in = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
		}
		
		
		while (true) {
			if (queries == null && queryString == null) {// prompt the user
				System.out.println("Enter query: ");
			}

			String line = queryString != null ? queryString : in.readLine();
			
			if (line == null || line.length() == -1) {
				break;
			}

			line = line.trim();
			if (line.length() == 0) {
				break;
			}
			
			System.out.println(line);			
			QueryParser queryParser = new QueryParser("content", analyzer);
			Query query = queryParser.parse(line);
			
			doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null && queryString == null);				

		}
		reader.close();
	}
	
	
	/** �??�� */
	/**
	 * B|B -> (predicted_label:B)
	 * P|B,P,PI -> (predicted_label:B or predicted_label:P or predicted_label:PI)
	 * I|B,I,PI -> (predicted_label:B or predicted_label:I or predicted_label:PI)
	 * O|B,O,U -> (predicted_label:B or predicted_label:O or predicted_label:U)
	 * */
	public void doPagingSearch(BufferedReader in, IndexSearcher searcher, Query query,
			int hitsPerPage, boolean raw, boolean interactive) throws IOException {

		System.out.println("query: (" + query + ")");
		
		searcher.setSimilarity(new BM25Similarity());
		
		TopDocs results = searcher.search(query, 5 * hitsPerPage);
		
		ScoreDoc[] hits = results.scoreDocs;

		int numTotalHits = Math.toIntExact(results.totalHits);
		System.out.println(numTotalHits + " total matching documents");
		
		int start = 0;
		int end = Math.min(numTotalHits, hitsPerPage);

		if(numTotalHits>500) {
			System.out.println("500개 이상 논문의 수 :"+numTotalHits);
		}
		else{
			
		
		while (true) {
			if (end > hits.length) {
				System.out.println("Only results 1 - " + hits.length +" of " + numTotalHits + " total matching documents collected.");
				System.out.println("Collect more (y/n) ?");
				String line = in.readLine();
				if (line.length() == 0 || line.charAt(0) == 'n') {
					break;
				}
				hits = searcher.search(query, numTotalHits).scoreDocs;
			}

			end = Math.min(hits.length, start + hitsPerPage);

			for (int i = start; i < end; i++) {
				if (raw) {                              // output raw format
					System.out.println("doc="+hits[i].doc+" score="+hits[i].score);
					continue;
				}

				Document doc = searcher.doc(hits[i].doc);
				String key = doc.get(fieldnames[keyindex]+"_");

				// print all cols corresponding document that has the key
				System.out.println("rank "+(i+1)+": ");
				if (key != null) {
					for(int iter=0 ; iter < fieldnames.length ; iter++) {
						System.out.println(fieldnames[iter] + ": " + doc.get(fieldnames[iter]+"_"));
					}
				}
				
				
				else {
					System.out.println((i+1) + ". " + "No such key value");
				}
				
				System.out.println("");
				
			}

			if (!interactive || end == 0) {
				break;
			}

			if (numTotalHits >= end) {
				boolean quit = false;
				while (true) {
					System.out.print("Press ");
					
					if (start - hitsPerPage >= 0) {
						System.out.print("(p)revious page, ");
					}
					
					if (start + hitsPerPage < numTotalHits) {
						System.out.print("(n)ext page, ");
					}
					System.out.println("(q)uit or enter number to jump to a page.");

					String line = in.readLine();
					if (line.length() == 0 || line.charAt(0)=='q') {
						quit = true;
						break;
					}
					if (line.charAt(0) == 'p') {
						start = Math.max(0, start - hitsPerPage);
						break;
					} else if (line.charAt(0) == 'n') {
						if (start + hitsPerPage < numTotalHits) {
							start+=hitsPerPage;
						}
						break;
					} else {
						int page = Integer.parseInt(line);
						if ((page - 1) * hitsPerPage < numTotalHits) {
							start = (page - 1) * hitsPerPage;
							break;
						} else {
							System.out.println("No such page");
						}
					}
				}
				if (quit) break;
				end = Math.min(numTotalHits, start + hitsPerPage);
			}
		}
		}
	}
	
	
	private String[] getfieldnames(String csvfilepath_name) {
		String[] fieldnames = null;
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(csvfilepath_name));
		    StringBuilder sb = new StringBuilder();
		    String line = br.readLine();
		    System.out.println("첫줄: "  + line);
		    
//			fieldnames = line.split(",");
			fieldnames = line.split("\t");
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		return fieldnames;
	}
	
	
	
	
	public static void main(String[] args) throws Exception {
		new SearchFiles();
	}
	
}
