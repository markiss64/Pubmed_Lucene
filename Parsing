import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class wind {

// tag값의 정보를 가져오는 메소드
	private static String getTagValue(String tag, Element eElement) {
		try {
			if (eElement.getElementsByTagName(tag) == null || eElement.getElementsByTagName(tag).getLength() == 0) {	// @@@ 추가된 부분.
				return "";															// @@@ 추가된 부분.
			}																		// @@@ 추가된 부분.	

			if (!eElement.getElementsByTagName(tag).item(0).hasChildNodes()) {		// @@@ 추가된 부분.
				return "";															// @@@ 추가된 부분.
			}																		// @@@ 추가된 부분.
			NodeList nlList = eElement.getElementsByTagName(tag).item(0).getChildNodes();
			Node nValue = (Node) nlList.item(0);
			if (nValue == null)
				return "";
			System.out.println("Tag: " + tag + "   Value:" + nValue.getNodeValue());
			return nValue.getNodeValue().replaceAll("\n", " "); // @@@ 추가된 부분.
		} catch (Exception e) {
			System.out.println("#############################################");
			System.out.println("#############################################");
			System.out.println("#############################################");
			System.out.println("Error:" + tag);
			System.out.println("#############################################");
			System.out.println("#############################################");
			System.out.println("#############################################");
			e.printStackTrace();
		}
		return "";
	}

// 글자수 제한 100개
	private String limit100(String inputstr) {
		String result = "";

		result = inputstr.substring(0, 100);

		return result;
	}

	public static void main(String[] args) {
		String sep = "\t";
		int page = 1; // 페이지 초기값
		BufferedWriter bw = null;
		try {

			while (true) {

				File ori_file = new File("C:\\Users\\hyunsic kim\\Desktop\\ori_pub\\pubmed20n0921.xml");

				File new_file = new File("C:\\Users\\hyunsic kim\\Desktop\\new_pub\\New_pubmed20n0921t.xml");

// xml 문서를 열기 위한 최초 작업
				DocumentBuilderFactory dbFactoty = DocumentBuilderFactory.newInstance();//
				DocumentBuilder dBuilder = dbFactoty.newDocumentBuilder();
				System.out.println("파싱중...");
				Document doc = dBuilder.parse(ori_file);

// root tag
				doc.getDocumentElement().normalize();


// 파싱할 tag
				Element root = doc.getDocumentElement();

				NodeList nList = doc.getElementsByTagName("PubmedArticle");
				NodeList childs = root.getElementsByTagName(("AbstractText"));

				Node child = childs.item(0);

// System.out.println("파싱할 리스트 수 : "+ nList.getLength());

				bw = new BufferedWriter(new FileWriter(new_file));

// 하위 태그들 순회를 순회해 보자
// System.out.println("class name: " + root.getAttribute("name"));

				NodeList childeren = root.getChildNodes(); // 자식 노드 목록 get해보자. 이 결과 값은 childeren의 객체로 표현

				bw.write(System.lineSeparator()
						+ ("J_ISSN" + sep + "J_Volume" + sep + "J_Year" + sep + "J_Title" + sep + "ArticleTitle" + sep
								+ "ArticleIdList" + sep + "Abstract" + sep + "AuthorList" + sep + "KeywordList"));
// 위에 여기다 bw.write 넣으면 결과에 안뜨고
				for (int i = 0; i < childeren.getLength(); i++) {// for 문을 돌리는데, childeren의 의 개수 만큼 돌린다.
					Node nNode = childeren.item(i); // 노드 리스트에서 하나의 요소를 선택하는 방법, i라는 변수로 만듬
// bw.write(System.lineSeparator()+("Journal: ISSN, Journal: Volume, Journal:
// Year, Journal: Title, ArticleTitle, Abstract, AuthorList, KeywordList,
// ArticleIdList "));
// 여기다 bw.write넣으면 왜 결과에 뜸????

					if (nNode.getNodeType() == Node.ELEMENT_NODE) { // 해당 노드의 종류 판정, Element일 때 {}문을 실행시켜라
						Element eElement = (Element) nNode; // ?

// Element eElement = (Element) nNode;

						String nodeName = eElement.getNodeName(); // 노드 네임을 볼수 있는 메소드를 통해 nodename에 저장
// System.out.println("node name:ttttttttttttttttttt " + nodeName); //노드 네임을 확인해
// 보자

/////////////////////////////////////////////////////////////////////////////////
//// Journal
/////////////////////////////////////////////////////////////////////////////////
						bw.write(System.lineSeparator() + (" "));

						bw.write(getTagValue("ISSN", eElement) + sep); // "Journal - ISSN: "
						bw.write(getTagValue("Volume", eElement) + sep); // "Journal - Volume: "
						bw.write(getTagValue("Year", eElement) + sep);// Journal - Year: "
						bw.write(getTagValue("Title", eElement) + sep); // "Journal - Title: "
						bw.write(getTagValue("ArticleTitle", eElement) + sep);// "ArticleTitle: "
						bw.write(getTagValue("ELocationID", eElement) + sep);// "ELocationID: "

/////////////////////////////////////////////////////////////////////////////////
//// AuthorList
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
//// Abstract Text
/////////////////////////////////////////////////////////////////////////////////
						NodeList abstract_text = eElement.getElementsByTagName(("AbstractText"));
						for (int k = 0; k < abstract_text.getLength(); k++) {
							Node node1 = abstract_text.item(k);
							if (node1.getNodeType() == Node.ELEMENT_NODE) {
								Element ele1 = (Element) node1;

								bw.write(ele1.getAttribute("Label") + ": " + ele1.getTextContent());

							}
						}
						bw.write(sep);

						NodeList list_author = eElement.getElementsByTagName("AuthorList");



// child node 가 1개 이상인 경우

						if (list_author.getLength() > 0) {
							for (int j = 0; j < list_author.getLength(); j++) {

								NodeList childList = list_author.item(j).getChildNodes();

								if (childList.getLength() > 0) {
									for (int t = 0; t < childList.getLength(); t++) {

// 데이터가 있는 애들만 출려되게 한다.
										if (childList.item(t).getNodeName().equals("#text") == false) {
											bw.write((childList.item(t).getNodeName() + ": "
													+ childList.item(t).getTextContent()));
// bw.write(getTagValue("ForeName", eElement)+getTagValue("LastName",
// eElement));

										}
									}
								}
							}
						}

						bw.write(sep);

/////////////////////////////////////////////////////////////////////////////////
//// Keyword List
/////////////////////////////////////////////////////////////////////////////////

						NodeList list_keyword = eElement.getElementsByTagName("KeywordList");

// child node 가 1개 이상인 경우
						if (list_keyword.getLength() > 0) {
							for (int u = 0; u < list_keyword.getLength(); u++) {

								NodeList childList = list_keyword.item(u).getChildNodes();

								if (childList.getLength() > 0) {
									for (int q = 0; q < childList.getLength(); q++) {

// 데이터가 있는 애들만 출려되게 한다.
										if (childList.item(q).getNodeName().equals("#text") == false) {
											bw.write((childList.item(q).getNodeName() + ": "
													+ childList.item(q).getTextContent().replaceAll("\n", "")));   // @@@ 추가된 부분.

										}
									}
								}

							}
						}
						bw.write(sep);



					} // if 문
				} // for 문 끝
// for end

				page += 1;
				System.out.println("page number : " + page);

				bw.close();
			}
		} catch (Exception e) {
			System.out.println("#############################################");
			System.out.println("#############################################");
			System.out.println("#############################################");
			System.out.println("Error1:");
			System.out.println("#############################################");
			System.out.println("#############################################");
			System.out.println("#############################################");
			e.printStackTrace();
		} // try~catch end

	} // main end
} // class end
